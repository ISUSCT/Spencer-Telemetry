[{"C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\index.js":"1","C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\App.js":"2","C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\MapChart.js":"3","C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\reportWebVitals.js":"4","C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\data\\SolarCar.js":"5"},{"size":500,"mtime":499162500000,"results":"6","hashOfConfig":"7"},{"size":4732,"mtime":1611099017041,"results":"8","hashOfConfig":"7"},{"size":3486,"mtime":1611088228538,"results":"9","hashOfConfig":"7"},{"size":401,"mtime":1611089315273,"results":"10","hashOfConfig":"7"},{"size":2056,"mtime":1611096129839,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"par8qb",{"filePath":"15","messages":"16","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19","usedDeprecatedRules":"14"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"14"},"C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\index.js",[],["24","25"],"C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\App.js",["26","27","28","29","30","31","32"],"C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\MapChart.js",["33"],"import React from \"react\";\r\nimport { geoCentroid } from \"d3-geo\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Marker,\r\n  Annotation,\r\n  Graticule,\r\n  Line,\r\n} from \"react-simple-maps\";\r\n\r\nimport allStates from \"./data/allstates.json\";\r\n\r\nconst geoUrl = \"https://cdn.jsdelivr.net/npm/us-atlas@3/states-10m.json\";\r\n\r\nconst offsets = {\r\n  VT: [50, -8],\r\n  NH: [34, 2],\r\n  MA: [30, -1],\r\n  RI: [28, 2],\r\n  CT: [35, 10],\r\n  NJ: [34, 1],\r\n  DE: [33, 0],\r\n  MD: [47, 10],\r\n  DC: [49, 21]\r\n};\r\n\r\nconst CURRENT_LONG = -88.9892;\r\nexport { CURRENT_LONG };\r\nconst CURRENT_LAT = 40.4981;\r\nexport { CURRENT_LAT };\r\n\r\nconst TARGET_LONG = -115.1485;\r\nconst TARGET_LAT = 36.1672;\r\n\r\n\r\nconst markers = [\r\n  {\r\n    markerOffset: -15,\r\n    name: \"Current Location\",\r\n    coordinates: [CURRENT_LONG, CURRENT_LAT]\r\n  },\r\n  { markerOffset: -15, name: \"Target Location\", coordinates: [TARGET_LONG, TARGET_LAT] },\r\n];\r\n\r\nconst MapChart = () => {\r\n  return (\r\n    <ComposableMap projection=\"geoAlbersUsa\">\r\n      <Geographies geography={geoUrl}>\r\n        {({ geographies }) => (\r\n          <>\r\n            {geographies.map(geo => (\r\n              <Geography\r\n                key={geo.rsmKey}\r\n                stroke=\"#FFF\"\r\n                geography={geo}\r\n                fill=\"#DDD\"\r\n              />\r\n            ))}\r\n            {geographies.map(geo => {\r\n              const centroid = geoCentroid(geo);\r\n              const cur = allStates.find(s => s.val === geo.id);\r\n              return (\r\n                <g key={geo.rsmKey + \"-name\"}>\r\n                  {cur &&\r\n                    centroid[0] > -160 &&\r\n                    centroid[0] < -67 &&\r\n                    (Object.keys(offsets).indexOf(cur.id) === -1 ? (\r\n                      <Marker coordinates={centroid}>\r\n                        <text y=\"2\" fontSize={14} textAnchor=\"middle\">\r\n                          {cur.id}\r\n                        </text>\r\n                      </Marker>\r\n                    ) : (\r\n                      <Annotation\r\n                        subject={centroid}\r\n                        dx={offsets[cur.id][0]}\r\n                        dy={offsets[cur.id][1]}\r\n                      >\r\n                        <text x={4} fontSize={14} alignmentBaseline=\"middle\">\r\n                          {cur.id}\r\n                        </text>\r\n                      </Annotation>\r\n                    ))}\r\n                </g>\r\n              );\r\n            })}\r\n          </>\r\n        )}\r\n      </Geographies>\r\n\r\n      {markers.map(({ name, coordinates, markerOffset }) => (\r\n        <Marker key={name} coordinates={coordinates}>\r\n          <g\r\n            fill=\"none\"\r\n            stroke=\"#FF5533\"\r\n            strokeWidth=\"2\"\r\n            strokeLinecap=\"round\"\r\n            strokeLinejoin=\"round\"\r\n            transform=\"translate(-12, -24)\"\r\n          >\r\n            <circle cx=\"12\" cy=\"10\" r=\"3\" />\r\n            <path d=\"M12 21.7C17.3 17 20 13 20 10a8 8 0 1 0-16 0c0 3 2.7 6.9 8 11.7z\" />\r\n          </g>\r\n          <text\r\n            textAnchor=\"middle\"\r\n            y={markerOffset}\r\n            style={{ fontFamily: \"system-ui\", fill: \"#5D5A6D\" }}\r\n          >\r\n            {name}\r\n          </text>\r\n        </Marker>\r\n      ))}\r\n\r\n        <Line\r\n            from={[-88.9892, 40.4981]}\r\n            to={[-115.1485, 36.1672]}\r\n            stroke=\"#FF5533\"\r\n            strokeWidth={4}\r\n            strokeLinecap=\"round\"\r\n        />\r\n\r\n    </ComposableMap>\r\n  );\r\n};\r\n\r\nexport default MapChart;\r\n","C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\reportWebVitals.js",[],"C:\\Users\\slkin\\Desktop\\telemetry_GUI\\interface\\src\\data\\SolarCar.js",[],{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":7,"column":3,"nodeType":"40","messageId":"41","endLine":7,"endColumn":11},{"ruleId":"38","severity":1,"message":"42","line":9,"column":3,"nodeType":"40","messageId":"41","endLine":9,"endColumn":12},{"ruleId":"38","severity":1,"message":"43","line":10,"column":3,"nodeType":"40","messageId":"41","endLine":10,"endColumn":6},{"ruleId":"38","severity":1,"message":"44","line":12,"column":3,"nodeType":"40","messageId":"41","endLine":12,"endColumn":7},{"ruleId":"38","severity":1,"message":"45","line":13,"column":3,"nodeType":"40","messageId":"41","endLine":13,"endColumn":16},{"ruleId":"38","severity":1,"message":"46","line":15,"column":3,"nodeType":"40","messageId":"41","endLine":15,"endColumn":7},{"ruleId":"38","severity":1,"message":"47","line":20,"column":3,"nodeType":"40","messageId":"41","endLine":20,"endColumn":9},{"ruleId":"38","severity":1,"message":"48","line":9,"column":3,"nodeType":"40","messageId":"41","endLine":9,"endColumn":12},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"no-unused-vars","'PieChart' is defined but never used.","Identifier","unusedVar","'LineChart' is defined but never used.","'Pie' is defined but never used.","'Line' is defined but never used.","'ReferenceLine' is defined but never used.","'Cell' is defined but never used.","'Legend' is defined but never used.","'Graticule' is defined but never used.","no-global-assign","no-unsafe-negation"]